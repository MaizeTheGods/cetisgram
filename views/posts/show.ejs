<%- include('../partials/header') %>

<style>
    /* Estilos para la imagen con zoom */
    .post-image-link {
        position: relative;
        display: inline-block;
        cursor: pointer;
    }
    .post-image-link .overlay-zoom {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .post-image-link:hover .overlay-zoom {
        opacity: 1;
    }
    /* Estilos para resaltar comentarios nuevos */
    @keyframes highlight {
        from { background-color: rgba(13, 110, 253, 0.2); }
        to { background-color: transparent; }
    }
    .newly-added {
        animation: highlight 2s ease-out;
    }
</style>

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Inicio</a></li>
        <li class="breadcrumb-item"><a href="/posts">Posts</a></li>
        <li class="breadcrumb-item active" aria-current="page"><%= post.title %></li>
    </ol>
</nav>

<!-- Contenido del Post -->
<div class="card shadow-sm mb-5">
    <div class="card-body">
        <h1 class="card-title"><%= post.title %></h1>
        
        <div class="d-flex justify-content-between align-items-center text-muted mb-4 flex-wrap">
            <div class="d-flex align-items-center mb-2 mb-md-0">
                <% if (post.authorPhotoURL) { %>
                    <a href="/posts/user/<%= post.authorId %>" class="text-decoration-none">
                        <img src="<%= post.authorPhotoURL %>" class="rounded-circle me-2" width="50" height="50" alt="<%= post.authorName %>" style="object-fit: cover;">
                    </a>
                <% } else { %>
                    <a href="/posts/user/<%= post.authorId %>" class="text-decoration-none">
                        <div class="rounded-circle bg-secondary d-flex align-items-center justify-content-center me-2" style="width: 50px; height: 50px;">
                            <span class="text-white" style="font-size: 1.5rem;"><%= (post.authorName || 'A').charAt(0).toUpperCase() %></span>
                        </div>
                    </a>
                <% } %>
                <div>
                    <strong class="d-block"><%= post.authorName || 'Anónimo' %></strong>
                    <div>
                        <% if (post.authorRole) { %><span class="badge <%= post.authorRole === 'admin' ? 'bg-danger' : 'bg-secondary' %>"><%= post.authorRole %></span><% } %>
                        <% if (post.isPinned) { %><span class="badge bg-primary ms-1" title="Post fijado"><i class="fas fa-thumbtack"></i> Fijado</span><% } %>
                    </div>
                </div>
            </div>
            <div class="text-md-end">
                <small><i class="far fa-clock me-1"></i> Publicado: <%= post.createdAt %></small>
            </div>
        </div>
        
        <% if (post.mediaUrl) { %>
            <div class="text-center mb-4">
                <% if (post.mediaType === 'video') { %>
                    <video controls preload="metadata" class="img-fluid rounded" style="max-width: 100%; max-height: 600px; background-color: #000;" <% if (post.thumbnailUrl) { %>poster="<%= post.thumbnailUrl %>"<% } %>>
                        <source src="<%= post.mediaUrl %>" type="<%= post.fileMimetype || 'video/mp4' %>">
                        Tu navegador no soporta la etiqueta de video.
                    </video>
                <% } else if (post.mediaType === 'image') { %>
                    <a href="#" class="post-image-link" data-bs-toggle="modal" data-bs-target="#imageModal">
                        <img src="<%= post.mediaUrl %>" alt="Imagen del post" class="img-fluid rounded">
                        <div class="overlay-zoom"><i class="fas fa-search-plus"></i></div>
                    </a>
                <% } %>
            </div>
        <% } %>
        
        <div class="post-content fs-5 mb-4" style="white-space: pre-wrap; word-break: break-word;">
            <%- post.content %>
        </div>
        
        <div class="post-stats d-flex flex-wrap justify-content-between align-items-center border-top pt-3">
            <div class="d-flex align-items-center">
                <span class="me-3"><i class="far fa-heart text-danger"></i> <%= post.likesCount || 0 %> Me gusta</span>
                <span class="me-3"><i class="far fa-comment text-primary"></i> <span id="commentCountHeader"><%= comments.length %></span> Comentarios</span>
                <span><i class="far fa-eye text-secondary"></i> <%= post.views || 0 %> Vistas</span>
            </div>
            
            <div class="mt-2 mt-md-0">
                <% if (locals.user) { %>
                    <% if (locals.user.uid === post.authorId) { %>
                        <!-- Acciones para el autor del post (registrado o anónimo) -->
                        <a href="/posts/<%= post.id %>/edit" class="btn btn-sm btn-outline-secondary me-1"><i class="fas fa-edit"></i> Editar</a>
                        <form method="POST" action="/posts/<%= post.id %>/delete" style="display: inline;" onsubmit="return confirm('¿Estás seguro de que quieres eliminar este post? Esta acción no se puede deshacer.');">
                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                            <button type="submit" class="btn btn-sm btn-outline-danger"><i class="fas fa-trash"></i> Eliminar</button>
                        </form>
                    <% } %>
                    <% if (locals.user.isAdmin) { %>
                        <!-- Acciones adicionales solo para administradores -->
                        <button class="btn btn-sm <%= post.isPinned ? 'btn-primary' : 'btn-outline-primary' %> ms-2" id="pinPostBtn" data-post-id="<%= post.id %>">
                            <i class="fas fa-thumbtack"></i> <%= post.isPinned ? 'Desfijar' : 'Fijar' %>
                        </button>
                    <% } %>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Modal para vista previa de imagen -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body p-0 text-center bg-dark">
                <img src="<%= post.mediaUrl %>" alt="Imagen del post" class="img-fluid">
            </div>
        </div>
    </div>
</div>

<!-- Sección de Comentarios -->
<div class="card shadow-sm mb-4">
    <div class="card-header bg-light"><h3 class="mb-0 h5">Comentarios (<span id="commentCountBody"><%= comments.length %></span>)</h3></div>
    <div class="card-body">
        <div id="mainCommentFormArea">
            <% if (locals.user) { %>
                <div id="commentFormMovableContainer">
                    <form id="commentForm" class="mb-4">
                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                        <input type="hidden" name="postId" id="postId" value="<%= post.id %>">
                        <input type="hidden" name="parentId" id="commentParentId" value="">
                        <div class="mb-3">
                            <textarea class="form-control" id="commentContent" name="content" rows="3" required placeholder="Añade un comentario..."></textarea>
                        </div>
                        <div id="commentError" class="alert alert-danger mb-3" style="display: none;"></div>
                        <div class="d-flex justify-content-between align-items-center">
                            <button type="submit" id="submitCommentBtn" class="btn btn-primary">
                                <span id="submitBtnText">Publicar</span>
                                <span id="submitSpinner" class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true" style="display: none;"></span>
                            </button>
                            <% if (locals.user.isAnonymous) { %>
                                <small class="text-muted">Estás comentando como anónimo.</small>
                            <% } %>
                        </div>
                    </form>
                </div>
            <% } else { %>
                <div class="alert alert-info">Debes <a href="/auth/login">iniciar sesión</a> para comentar.</div>
            <% } %>
        </div>

        <div id="commentsList">
            <% if (comments && comments.length > 0) { %>
                <%
                // Función para renderizar comentarios recursivamente
                const renderComments = (commentList, depth = 0) => {
                    commentList.forEach(comment => {
                %>
                        <div class="comment mb-4 border-bottom pb-3" id="comment-<%= comment.id %>" style="margin-left: <%= depth * 20 %>px;">
                            <div class="d-flex">
                                <div class="flex-shrink-0">
                                    <a href="/posts/user/<%= comment.authorId %>" class="text-decoration-none">
                                        <% if (comment.authorPhotoURL) { %>
                                            <img src="<%= comment.authorPhotoURL %>" class="rounded-circle" width="50" height="50" alt="<%= comment.authorName %>" style="object-fit: cover;">
                                        <% } else { %>
                                            <div class="rounded-circle bg-secondary d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                                <span class="text-white fs-5"><%= (comment.authorName || 'A').charAt(0).toUpperCase() %></span>
                                            </div>
                                        <% } %>
                                    </a>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <strong class="mb-0"><%= comment.authorName || 'Anónimo' %></strong>
                                            <% if (comment.isAnonymous) { %><span class="badge bg-secondary ms-1">Anónimo</span><% } %>
                                        </div>
                                        <small class="text-muted" title="<%= new Date(comment.createdAt).toLocaleString() %>">
                                            <%= new Date(comment.createdAt).toLocaleDateString() %>
                                            <% if (comment.edited) { %><span class="ms-1 fst-italic">(editado)</span><% } %>
                                        </small>
                                    </div>
                                    <div class="comment-content my-2" style="white-space: pre-wrap; word-break: break-word;"><%- comment.content.replace(/\n/g, '<br>') %></div>
                                    <div class="comment-actions">
                                        <% if (locals.user) { %>
                                            <button class="btn btn-sm btn-link text-secondary p-0 reply-comment-btn" data-comment-id="<%= comment.id %>" data-comment-author="<%= comment.authorName %>"><i class="fas fa-reply"></i> Responder</button>
                                            <% if (locals.user.uid === comment.authorId || locals.user.isAdmin) { %>
                                                <button class="btn btn-sm btn-link text-danger p-0 ms-2 delete-comment-btn" data-comment-id="<%= comment.id %>"><i class="fas fa-trash"></i> Eliminar</button>
                                            <% } %>
                                        <% } %>
                                    </div>
                                    <% if (comment.children && comment.children.length > 0) { %>
                                        <div class="comment-children mt-3">
                                            <% renderComments(comment.children, depth + 1); %>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                <%
                    });
                };
                renderComments(comments);
                %>
            <% } else { %>
                <div class="alert alert-light text-center" id="noCommentsMessage">Aún no hay comentarios.</div>
            <% } %>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const csrfToken = "<%= csrfToken %>";
    const currentUser = <%- JSON.stringify(locals.user || null) %>;

    // --- MANEJO DEL FORMULARIO DE COMENTARIOS ---
    const commentForm = document.getElementById('commentForm');
    if (commentForm) {
        commentForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalBtnText = submitBtn.querySelector('#submitBtnText').textContent;
            
            // UI: Deshabilitar botón y mostrar spinner
            submitBtn.disabled = true;
            submitBtn.querySelector('#submitBtnText').textContent = 'Publicando...';
            submitBtn.querySelector('#submitSpinner').style.display = 'inline-block';
            document.getElementById('commentError').style.display = 'none';

            try {
                const response = await fetch('/comments/new', {
                    method: 'POST',
                    headers: { 'X-CSRF-Token': csrfToken },
                    body: formData
                });
                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Error desconocido.');
                }
                
                // Éxito: Limpiar formulario y añadir comentario a la UI
                this.reset();
                cancelReply(); // Mueve el form a su lugar original
                addNewCommentToUI(data.comment);
                updateCommentCount(1);
                
                // Scroll y highlight
                const newCommentEl = document.getElementById(`comment-${data.comment.id}`);
                newCommentEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
                newCommentEl.classList.add('newly-added');

            } catch (error) {
                document.getElementById('commentError').textContent = error.message;
                document.getElementById('commentError').style.display = 'block';
            } finally {
                // UI: Restaurar botón
                submitBtn.disabled = false;
                submitBtn.querySelector('#submitBtnText').textContent = originalBtnText;
                submitBtn.querySelector('#submitSpinner').style.display = 'none';
            }
        });
    }

    // --- LÓGICA DE RESPONDER Y BORRAR COMENTARIOS ---
    document.getElementById('commentsList').addEventListener('click', async function(e) {
        // Botón de Responder
        if (e.target.closest('.reply-comment-btn')) {
            const button = e.target.closest('.reply-comment-btn');
            const commentId = button.dataset.commentId;
            const authorName = button.dataset.commentAuthor;
            const targetCommentElement = document.getElementById(`comment-${commentId}`);
            
            moveReplyForm(targetCommentElement, commentId, authorName);
        }
        // Botón de Eliminar
        if (e.target.closest('.delete-comment-btn')) {
            const button = e.target.closest('.delete-comment-btn');
            const commentId = button.dataset.commentId;

            if (confirm('¿Estás seguro de que quieres eliminar este comentario?')) {
                try {
                    const response = await fetch(`/comments/${commentId}`, {
                        method: 'DELETE',
                        headers: { 'X-CSRF-Token': csrfToken }
                    });
                    const data = await response.json();
                    if (!data.success) throw new Error(data.message);
                    
                    document.getElementById(`comment-${commentId}`).remove();
                    updateCommentCount(-1);
                } catch (error) {
                    alert('Error al eliminar el comentario: ' + error.message);
                }
            }
        }
    });

    // --- FUNCIONES AUXILIARES ---
    const mainCommentFormArea = document.getElementById('mainCommentFormArea');
    const commentFormMovableContainer = document.getElementById('commentFormMovableContainer');
    
    function moveReplyForm(targetContainer, parentId, authorName) {
        const parentIdInput = document.getElementById('commentParentId');
        const contentInput = document.getElementById('commentContent');

        parentIdInput.value = parentId;
        contentInput.placeholder = `Respondiendo a @${authorName}...`;
        
        let replyStatusDiv = targetContainer.querySelector('.reply-status');
        if (!replyStatusDiv) {
            replyStatusDiv = document.createElement('div');
            replyStatusDiv.className = 'reply-status alert alert-info mt-2';
            replyStatusDiv.innerHTML = `<span>Respondiendo a <strong>@${authorName}</strong></span> <button class="btn-close float-end"></button>`;
            targetContainer.querySelector('.comment-actions').insertAdjacentElement('afterend', replyStatusDiv);
            replyStatusDiv.querySelector('.btn-close').addEventListener('click', cancelReply);
        }
        
        replyStatusDiv.insertAdjacentElement('afterend', commentFormMovableContainer);
        contentInput.focus();
    }

    function cancelReply() {
        const parentIdInput = document.getElementById('commentParentId');
        const contentInput = document.getElementById('commentContent');
        const replyStatusDiv = document.querySelector('.reply-status');

        if (replyStatusDiv) replyStatusDiv.remove();
        parentIdInput.value = '';
        contentInput.placeholder = 'Añade un comentario...';
        mainCommentFormArea.prepend(commentFormMovableContainer);
    }
    
    function updateCommentCount(value) {
        ['commentCountHeader', 'commentCountBody'].forEach(id => {
            const el = document.getElementById(id);
            if (el) el.textContent = parseInt(el.textContent) + value;
        });
    }

    function addNewCommentToUI(comment) {
        // Función para crear el HTML del comentario (reutilizable)
        const createCommentHTML = (c, depth) => {
            const profilePic = c.authorPhotoURL
                ? `<img src="${c.authorPhotoURL}" class="rounded-circle" width="50" height="50" alt="${c.authorName}" style="object-fit: cover;">`
                : `<div class="rounded-circle bg-secondary d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;"><span class="text-white fs-5">${(c.authorName || 'A').charAt(0).toUpperCase()}</span></div>`;
            
            const replyButtonHTML = currentUser ? `<button class="btn btn-sm btn-link text-secondary p-0 reply-comment-btn" data-comment-id="${c.id}" data-comment-author="${c.authorName}"><i class="fas fa-reply"></i> Responder</button>` : '';
            const deleteButtonHTML = (currentUser && (currentUser.uid === c.authorId || currentUser.isAdmin)) ? `<button class="btn btn-sm btn-link text-danger p-0 ms-2 delete-comment-btn" data-comment-id="${c.id}"><i class="fas fa-trash"></i> Eliminar</button>` : '';

            return `
                <div class="comment mb-4 border-bottom pb-3" id="comment-${c.id}" style="margin-left: ${depth * 20}px;">
                    <div class="d-flex">
                        <div class="flex-shrink-0"><a href="/posts/user/${c.authorId}" class="text-decoration-none">${profilePic}</a></div>
                        <div class="flex-grow-1 ms-3">
                            <div class="d-flex justify-content-between">
                                <div><strong>${c.authorName || 'Anónimo'}</strong>${c.isAnonymous ? ' <span class="badge bg-secondary ms-1">Anónimo</span>' : ''}</div>
                                <small class="text-muted">${new Date(c.createdAt).toLocaleDateString()}</small>
                            </div>
                            <div class="comment-content my-2" style="white-space: pre-wrap; word-break: break-word;">${c.content.replace(/\n/g, '<br>')}</div>
                            <div class="comment-actions">${replyButtonHTML}${deleteButtonHTML}</div>
                        </div>
                    </div>
                </div>
            `;
        };

        const commentsList = document.getElementById('commentsList');
        const noCommentsMsg = document.getElementById('noCommentsMessage');
        if (noCommentsMsg) noCommentsMsg.remove();

        const newCommentElement = document.createElement('div');
        newCommentElement.innerHTML = createCommentHTML(comment, comment.depth || 0);

        if (comment.parentId) {
            const parentEl = document.getElementById(`comment-${comment.parentId}`);
            if (parentEl) {
                let childrenContainer = parentEl.querySelector('.comment-children');
                if (!childrenContainer) {
                    childrenContainer = document.createElement('div');
                    childrenContainer.className = 'comment-children mt-3';
                    parentEl.querySelector('.comment-actions').insertAdjacentElement('afterend', childrenContainer);
                }
                childrenContainer.appendChild(newCommentElement.firstElementChild);
            }
        } else {
            commentsList.prepend(newCommentElement.firstElementChild);
        }
    }
});
</script>

<%- include('../partials/footer') %>